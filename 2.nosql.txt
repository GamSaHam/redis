
1. NoSQL은 조인이 가능하며 어떤 NoSQL은 스키마를 가진다.
2. RDBMS의 특징인 트랜잭션의 특징 중 하나인 ACID를 지원하는 NoSQL도 있다.

- 데용량 웹 서비스를 위하여 만들어진 데이터 저장소
- 관계형 데이터 모델을 지양하며 대량의 분산된 데이터를 저장하고 조회하는 데 특화된 저장소
- 스키마 없이 사용 가능하거나 느슨한 스키마 제공하는 저장소

우리는 편의상 'NoSQL이란 빅데이터를 처리하기 위한 분산 데이터 저장소의 통칭' 정도로 약속하자.

NoSQL 일반적인 특징

NoSQL은 저마다 쓰기/읽기 성능 특화, 2차 인덱스 지원, 자동 샤딩 지원 같은 고유한 특징을 가진다.
특화란 상대적인 쓰기 성능 대비 읽기 성능에 대한 지표다.
예를 들어 하둡 기반의 NoSQL인 HBase는 쓰기에 특화된 솔루션이다.
단일 시스템으로 구성된 HBase 클러스터는 초당 약 10만 쓰기 작업 또는 초당 약 5,000 읽기 작업을 수행할 수 있다.
즉, 읽기 작업보다 쓰기 작업이 더 빠르다. 일반적으로 NoSQL은 관계형 데이터베이스에 비하여
쓰기와 읽기 성능이 월등히 빠르다. HBase는 관한 더 자세한 정보는 "HBase 완벽 가이드"를 참조하라

2010년 이전에는 관계형 데이터베이스가 주류였다.
2000년 중반부터 글로벌 웹 서비스가 다수 등장하고, 기존의 관계형 데이터베이스를 사용하여 처리 할 수 없을 만큼
의 데이터를 생산하기에 이르렀다.

일반적으로 관계형 데이터베이스는 저장된 데이터의 양이 많아 질수록 읽기/쓰기 성능이 저하가 일어난다.
특히 쓰기 성능저하가 심한데. 이는 대부분 관계형 데이터베이스가 채택하고 있는 인덱스 처리 방법인 B트리가 한계에서 기인한다.
데이터 관리 패턴에 해당하기 때문에 단일 하드웨어의 성능에 따라 전체 시스템의 성능이 결정된다.

이러한 이유로 오라클 같은 상용 데이터베이스 개발사들은 분산 환경에서 동작하도록 관계형 데이터베이스의 트렌잭션을 느슨하게 처리하는
솔루션을 개발했다. 이와 같은 솔루션을 사용하면 애플리케이션의 복잡도가 증가하고 하드웨어와 소프트웨어 개발 비용 증가로 이어지게 된다. 
기장 기본적인 특성들을 훼손되고 동시에 분산 환경에서도 그 다지 최적화되지도 못하는 딜레마에 빠지게 된다.

관계형 데이터베이스 진영에서 기존 관계형 데이터 베이스 시스템을 개량하여 분산 환경에 대처하기 위한 솔루션을 개발하고 있을 때,
한편에서는 데이터를 다른 관점에서 바라보고 처리하는 기술에 대한 연구가 활발하게 진행되고 있었다.

구글, 페이스북, 아마존과 같이 성공한 글로벌 서비스 업체들은 더 이상 관계형 데이터베이스만으로는 서비스 트래픽을 감당하기 어렵다고
판단했다. 특히 구글의 빅테이블, 아마존의 다이나모 같은 논문 및 자료는 데이터를 실시간으로 분산 처리하는 개념을 세상에 알려주었다.
시간이 지남에 따라 이 개념들을 토대로 실시간 분산 처리를 위한 오픈소스 솔루션들이 속속 개발되었고, 이같은 노력의 결과물이 NoSQL이다. 
NoSQL은 분산 환경에서 대량의 데이터를 빠르게 처리하기 위해서 한두 가지 단점을 가진 채로 개발됐다.

NoSQL은 관계형 데이터베이스가 제공하는 쿼리와 트랜잭션 같은 편의 기능을 제공하지 않으며, 제공하는 데이터의 일관성 레벨도 NoSQL별로 다르다.

또한 솔루션을 도입하기 위해서 해당 NoSQL의 설계 사상과 내부 구조를 파악해야 하며 종류가 다양하기 때문에 각각의 NoSQL에 대한 도입
사례가 많지 않다. 그럼에도 불구하고 NoSQL을 선택하는 이유는 하드웨어 추가에 따른 성능의 선형 증가를 얻을 수 있다는 장점 때문이다.

또한 다양한 종류의 NoSQL이 존재 하므로 선택의 폭이 넓다.

데이터베이스 중심의 애플리케이션 개발에서 서비스 중심의 개발이라는 패러다임 전환이 일어났다.

NoSQL은 대량의 데이터를 빠르게 처리하기 위해 메모리에 임시 저장하고 응답하는 등의 방법을 사용한다.
또한 동적인 스케일 아웃을 지원하기도 하며, 가용성을 위해 데이터 복제등의 방법으로 관계형 데이터베이스가 
제공하지 못하는 성능과 특징을 제공한다. NoSQL은 매우 자유도가 높은 솔루션으로, 스키마 없이 데이터를 저장하고 조회할 수 있으며
실시간으로 시스템의 확장과 축소를 지원하기도 한다. 또한 시스템 정지 없이 저장소 소프트웨어의 업그레이드를 수행할 수 있다.

NoSQL 솔루션이라면 서비스에 필요한 기능을 제공하는지 뿐만 아니라 반드시 해당 NoSQL의 설계 사상과 내부구조를
파악하는 작업이 선행되어야 한다.




