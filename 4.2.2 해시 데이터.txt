문장열 필드와 값으로 이루어진 맵(Map) 구조로 되어 있다.
해시 데이터는 2^32 - 1개의 필드와 값을 저장할수 있는데 숫자로 바꾸면 약 42억 개가 넘는다.
hgetall, hkeys, hvals를 제외한 모든 해시 명령의 시간 복잡도는 O(1)이다.

키 -> 해시 데이터(필드1, 값1 | 필드2, 값2)

이런 구조는 일반적인 프로그래밍 언어의 맵 자료구조와 동일

2.4절의 레디스 기본 명령어 간단한 해시 처리 명령들을 살펴봤다. 여기서는 더 깊이 있게 알아볼 것이다.

hmset 
주어진 필드와 값의 쌍을 해시 데이터에 저장
시간복잡도: O(1)

hsetnx
주어진 필드가 존재하지 않을 때 저장
시간복잡도: O(1)

hmget
주어진 필드 목록을 주어진 키에서 조회
시간복잡도: O(1)

hlen
주어진 키에 저장된 필드의 개수를 조회
시간복잡도: O(1)

hdel 
명령은 주어진 키에 저장된 필드를 제거
시간 복잡도 O(1)

h는 Hash를 나타내고 m은 다중 필드를 인자로 입력

127.0.0.1:6379> hmset key name gli-dong email test@test.com age 21
OK
127.0.0.1:6379> hgetall key
1) "name"
2) "gli-dong"
3) "email"
4) "test@test.com"
5) "age"
6) "21"
127.0.0.1:6379> hget key email
127.0.0.1:6379> hsetnx key email foo@test.com
127.0.0.1:6379> hget key email
"test@test.com"
// 정보가 바뀌지 않음

127.0.0.1:6379> hmget key name email
1) "gli-dong"
2) "test@test.com"

127.0.0.1:6379> hlen key
(integer) 3
저장된 해시길이가 3

127.0.0.1:6379> hdel key device
(integer) 1

hincrby
시간복잡도: O(1)

hincrbyfloat
시간복잡도: O(1)

127.0.0.1:6379> hmset key life 1000 mana 1300
OK

127.0.0.1:6379> hincrby key life -20
(integer) 980
127.0.0.1:6379> hget key life
"980"
127.0.0.1:6379> hincrby key mana -30
(integer) 1270
127.0.0.1:6379> hincrby key mana 25
(integer) 1295
127.0.0.1:6379> hset key critical 12.5
(integer) 1
127.0.0.1:6379> hget key critical
"12.5"
127.0.0.1:6379> hincrbyfloat key critical 0.2
"12.699999999999999"

// float 형태를 보아서 정확하게 인식을 못함

hkeys
키값 목록이나 값의 목록만을 조회하는 명령
시간복잡도: O(N)

hvals
주어진 키에 저장된 모든 값에 필드에서 이름을 제외한 값 목록을 조회
시간복잡도: O(N)

127.0.0.1:6379> hkeys key
1) "life"
2) "mana"
3) "critical"
127.0.0.1:6379> hvals key
1) "980"
2) "1295"
3) "12.699999999999999"
127.0.0.1:6379>

// 저장된 필드와 개수와 응답 속도의 관계는 비례한다.

레디스는 메모리 공간을 절약하기 위해서 세가지 내부 저장구조(zipmap, ziplist, intset)를 사용한다.

그런데 이 내부 저장구조를 사용하게 되면 CPU를 더 사용하게 된다.

인스타그램의 개발자가 테스트한 결과를 보자.

백만 개의 키와 정수값을 문자열 데이터로 저장하는데 필요한 메모리는 70MB인데

zipmap을 사용한 해시 데이터로 저장하면 16MB만 소모된다.

zip은 레디스 2.6버전부터 ziplist라는 구조로 대치된다.






























