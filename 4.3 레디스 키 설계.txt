NoSQL의 설계에도 동일하게 적용된다. 

RDBMS에서 키와 동일한 개념이나. 키 하나가 하나의 레코드를 정의한다고 볼수 있다.

NoSQL은 단일 키에 의해서 데이터가 처리하기 때문에 관계형 데이터베이스에 비하여

구조적으로 저장하고 조회 하는 것은 떨어진다.

구조적이며 중복을 지양하는 저장방법을 희생하여 단순한 구조의 대량 데이터를 저장하고 조회하는 데

초점을 맞추어 개발되었다. 

NoSQL의 단순성을 해치지 않으면서 정보를 효율적으로 저장할수 있는 방법이 키 설계다.
이것은 관계형 데이터베이스의 테이블 설계와 유사한 개념으로 볼 수 있다.

관계형 데이터베이스의 스키마를 기본으로 하여 레디스의 저장구조로 바꾸는 방법
화면에 출력될 데이터를 기준으로 하여 키를 설계하는 방법

두 가지 방법 모두 키에 부가적인 정보를 포함한다.

관계형 데이터베이스: 업무 도메인 분석, 정보 개체 정의, 개체 간 관계 정의의 순서로 분석하여 스키마 설계 쿼리문을 통해 데이터 조회
NoSQL: 업부 도메인 분석, 조회할 데이터, 객체 정의의 순서를 통해서 데이터 저장하고 조회

관계형 데이터 베이스에서는 데이터 관계가 최우선 조건이라면, NoSQL에서는 쉽고 빠른 조회가 최우선 조건이기 때문이다.

관계형 데이터베이스의 사용자 정보를 조회하는 예제

[예제 4-29]
select * from user_profile where userid = 'kris'

redis 127.0.0.1:6379> get user:profile:kris

레디스에서 [예제 4-29]와 같이 값에 부분정보가 포함되는 것이 아니라, 키 정보에 부분정보가 포함된다.

User 테이블(사용자번호, 이름) oneToMany 작성글 테이블(사용자번호, 작성글번호, 제목, 내용, 작성일자)

작성글:사용자번호:작성글번호 -> 해시데이터(제목, 내용, 날짜)

{테이블 이름}:{사용자번호}:{작성글번호} 순서로 저장됨


user 테이블
사용자 번호: 252321
이름: kris

posting 테이블
사용자 번호: 252321
작성글 번호: 151
제목: 안녕하세요
내용: 날씨가 참 좋네요

redis 설계
키
posting:252321:151 = 안녕하세요|날씨가 참 좋네요

NoSQL에서 관계를 표현하기 위한 방법으로는 키에 관계 정보를 포함하는 것이다.

마치며
이번장에는 레디스의 데이터형과 명령에 대해서 살펴 보았다.
레디스는 빠른 성능을 가장 우선시 하는 NoSQL이다.
그래서 시간 복잡도를 자주 언급했다.
NoSQL을 내부 처리에 대한 이해없이 마구잡이로 명령을 사용하면 전통적인 관계형
데이터베이스보다 더 느리다고 느낄 수 있다. 
실제로 포럼에서 '레디스가 생각했던 것보다 빠르지 않다', '갑자기 느려졌다' 와 같은 질문을 종종 듣는다.
이런 질문의 코드를 보면 대부분 기존의 데이터 구조를 그대로 레디스로 옮기려는 시도를 한다.

관계형 데이터베이스의 기능을 그대로 NoSQL로 옮기려고 들면, 어떤 NoSQL도 만족할 만한 성능을 내지 못할 것이다.

레디스를 사용할때 시간복잡도가 높은 명령을 자주 사용하는 것인 좋지 않다.
부록항목에 표기를 했다. 성능이 의심이 들 때마다 한번씩 참고하기를 바란다.
시간 복잡도가 높은 명령을 사용해야 한다면, 다양한 테스트를 통해서 적절한 설정값을 찾아서 사용하기 바란다.
이 부분은 10장 '레디스 튜닝에서 알아보도록 하겠다.'

NoSQL에서는 데이터 간의 관계는 중요하지 않으며 처리할 수 있는 데이터양과 성능이다.

NoSQL을 도입하는 가장 좋은 방법은 점진적으로 적용하는 길 뿐이다.


