
관계형 데이터베이스는 충분히 성숙된 기술이며, 범용 데이터 저장소로서의 역할을 충분히 수행하고 있다.
복잡한 업무 로직을 처리하는 분야에서도 관계형 데이터베이스가 더 나은 성능을 보인다.
그럼에도 불구하고 NoSQL이 필요한 상황이 발생할 수 있다.

1. 대량의 단순 정보를 빠르게 저장하고 조회할 때
   관계형 데이터베이스가 처리하지 못하는 데이터를 입력할때(보통 수십 기가바이트의 데이터)
2. 스키마가 고정되지 않은 데이터를 저장하고 조회할 때
3. 관계형 데이터베이스의 특성상 제공 가능한 성능의 한계가 있을때 NoSQL 선택한다.
4. 수십 기가 바이트의 데이터로 실시간 서비스를 하기 위해서는 데이터베이스의 하드웨어에 들어간 비용이 이미
수천만 원을 호가할 것이다. 나중에는 더 이상 하드웨어에 CPU나 메모리를 추가 증설할 슬롯조차 남아있지 않을 것이다.

어떤 SQL을 사용해야 하는가를 선택

카산드라라고 정의 6대의 노드 
카산드라의 특징으로 인해 잘못 사용된 예시가 나옴

구현된 서비스에 강한 일관성 모델이 필요한지, 느슨한 일관성 모델을 사용해도 큰 문제가 되지 않는지에 대한 판단이 우선되어야 한다.

일관성 모델: 어느 정도의 일관성 모델이 필요한지 먼저 확인 

데이터 모델: 제공하려는 기능이 키-값 모델과 같은 데이터 모델로 처리가 가능한지 또는 문서 모델과 같이 중첩된 구조를 지원해야 하는지
이 부분은 실제 구현에 따라서 달라질 수 있다. 결론적으로 선택한 NoSQL의 데이터 모델로 필요한 기능을 구현할 수 있는지에 대해 판단해야 한다.

읽기 쓰기 성능: 제공할 기능의 읽기와 쓰기 비율에 따라서 선택할 NoSQL도 바뀌게 된다.
예를 들어 읽기 쓰기 모두에 빠른 응답시간이 필요하다면 인 메모리 NoSQL이 후보
읽기 비율이 높다면 B트리 인덱스 구조

단일 고장점: 선택한 NoSQL 단일 고장점을 가지고 있는지 쉬운 복구가 가능한지 무정지 서비스가 중요 목표라면 단일 고장점을
가진 NoSQL은 선택을 피해야 한다.

원자성 지원: 선택한 NoSQL의 트랜잭션 지원 여부, 단일 연산에 대한 원자성 지원여부 같은 CAP
특징을 확인, 원자성이 서버, 클라이언트에서 지원 확인, 클라이언트에서 지원하는 단일 연산의 원
자성은 코드의 복잡성을 증가시킬 수 있다.

하드웨어 구성: NoSQL이 가지는 시스템 아키텍처를 확인, 가용성을 지원하기 위해서 마스터-슬레이브
구조의 NoSQL을 선택했다면 데이터의 최대 크기는 절대적인 저장소 크기의 절반이다.

무중단 시스템: 시스템을 확장할 때 시스템 중단이 필요한지 여부와 같은 시스템의 특성을 확인
예를 들어 MongoDB와 같이 자동 샤딩을 지원하는 NoSQL은 운영 중에 시스템을 추가할 수 있지만,
쟈동 샤딩 중에는 서비스 응답시간이 느려지기도 한다.

서비스에 필요한 부분과 필요 없는 부분을 먼저 선택하고 난 뒤 그에 맞는 NoSQL을 선택해야 한다.
서비스를 부분으로 나누어 별도의 NoSQL을 배치하고 주 저장소는 관계형 데이터베이스를 사용하기도 한다.

만약 주 서비스에 NoSQL을 도입하는 것이 꺼려진다면 부분적인 도입으로부터 출발하는 것도 좋은
방법이다.

마치며
이번 장에서는 NoSQL에 대한 전체적인 개념과 CAP 이론, NoSQL의 분류, NoSQL 솔루션들의 장단점

실제로 많은 사용자가 NoSQL에 대한 오해로 인하여 초기 도입 시에 많은 고통을 겪기도 한다.
NoSQL을 적용하기만 하면 지금까지 겪었던 모든 문제들(스케일 아웃, 높은 가용성, 트래픽 처리를 위한 성능)이 한꺼번에 해결
될 거라 믿는다. 하지만 NoSQL은 관계형 데이터베이스의 한계를 극복하고 모든 장점만을 모아둔 솔루션이 아니다.
기존에 관계형 데이터베이스가 제공하는 테이블 조인, 트랜잭션, SQL 문과 같은 편의성을 포기하고 스케일 아웃과 같은
NoSQL의 장점을 얻은 또 다른 데이터베이스다. '얻는 것이 있으면 잃는 것도 있다'
