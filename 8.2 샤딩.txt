샤딩은 다른 용어로 파티셔닝(Partioning)이라고 부른다. 데이터 파티셔닝은 두 가지 관점에서 유용하다.

1. 더 많은 데이터를 레디스에 저장할 수 있다.

예를 들어 복제를 사용했을 때 레디스에 저장 가능한 데이터의 전체 크기는 마스터 노드의 메모리 크기와 동일하거나 더 작다.
즉 마스터 노드의 메모리 크기에 의해서 저장 가능한 전체 데이터 크기가 결정된다.

파티셔닝은 각 데이터를 특정 조건에 따라서 서버에 분산 저장하는 기법이다.

샤딩은 동일한 개수의 하드웨어를 사용할 때 복제에 비해서 더 많은 데이터를 저장할 수 있다.

10개의 데이터가 저장된 레디스 클러스터를 표현한 그림을 보자

레디스 클러스터

> 샤드1, 샤드2

저장된 10개의 데이터를 저장하기 위해서 1GB의 메모리가 필요하다고 가정하자. 복제를 사용하여 저장하면 각 노드당 1GB의 메모리

가 필요하다고 가정하자. 복제를 사용하여 저장하면 각 노드당 1GB의 메모리가 필요하다. 하지만 2개의 노드로 샤딩을 구성하면

각 노드당 500MB의 메모리를 사용하는 구성이 가능하다.


2. 샤딩을 통해서 쓰기 성능을 증대를 이룰 수 있다. 하나의 물리적인 하드웨어가 처리 할 수 있는 트랜잭션 수를 100이라고

했을 떄 다중의 하드웨어에 복제를 수행하여 쓰기 성능을 증대 하려는 시도를 생각해보자. 마스터 하드웨어에 쓰기 연산이 발생하면

나머지 두 하드웨어에도 동일한 쓰기 연산이 발생해야 동기화가 유지된다. 즉, 모든 노드가 동일한 쓰기 연산을 수행하게 되므로

복제를 통해서는 쓰기 성능을 증대시킬 수 없다. 

레디스 2.6 버전에서는 서버 측 샤딩을 지원하지 않는다. 서버 측 샤딩이란 여러개의 노드로 구성된 클러스터에 데이터 저장할 떄

클러스터 레벨에서 데이터가 저장될 위치를 결정하는 것을 말한다.

서버 측 샤딩이 지원되는 NoSQL의 클라이언트는 데이터가 어느 노드에 위치하는지 신경 쓰지 않고 데이터를 저장하거나 조회하기

때문에 데이터 저장 위치의 투명성이 보장된다. 레디스는 아직까지 서버 측 샤딩을 지원하지 않으므로 클라이언트 측 샤딩을

사용하여야 한다.

아래는 레디스 클라이언트에서 적용 가능한 샤딩의 방법을 나열

수직 샤딩(Vertical Sharding): 관계형 데이터베이스의 테이블에 해당하는 정보를 노드별로 분할하는 방법이다.
예를 들어 사용자 정보는 첫번째 노드, 친구 정보는 두번째 노드에 저장하는 방식을 말한다.

범위 지정 샤딩(Range Sharding): 키를 특정 범뷔를 기준으로 분할하여 저장하는 방법이다. 예를 들어 1부터 1,000까지의
키가 있을 때 1부터 500까지의 키는 첫 번째 노드, 501부터 1,000까지의 키는 두 번째 노드에 저장하게 된다.

해시 기반 샤딩(Hash Based Sharding): 키를 해시 함수에 대입하여 결과값에 특정 연산을 가해 데이터의 위치를 결정하는
방법을 말하는데, 일관된 해상(Consistent Hashing) 이라고 한다.









