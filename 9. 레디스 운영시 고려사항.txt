레디스는 다양한 환경에서 운용된다. 대표적으로 AWS 같은 클라우드 컴퓨팅 환경이나 IDC에 구축된 클러스터를 예로 들 수 있다.
이러한 환경에서 레디스 클러스터를 운영할 때 고려할 사항 중에서 설정과 하드웨어 관한 내용을 알아보자.

이 장의 내용
- 임계점의 정의
- CPU, 메모리, 네트워크에 대한 임계점
- 임계점 테스트 벤치마크
- 임계점의 한계를 극복하기 위한 하드웨어 구성

9.1 임계점
스케일 업과 스케일 아웃 처리 능력을 향상시키는 방법이다.
스케일 업은 하드웨어의 성능을 올리는 방법이다.
한대 창치에 성능에는 한계가 있기 마련이다.
논리적으로 스케일 아웃은 성능에 한계가 없다. 하지만 현실적으로 네트워크 대역폭 등에 의한 한계가 있다.
이와 같은 한계를 임계점이라 한다. 
이번 절에서는 레디스 클러스터의 하드웨어의 임계점에 대해 알아본다.

9.1.1 CPU
레디스는 데이터 저장과 조회에 단일 스레드를 사용한다. 바꾸어 말하면 멀티코어 시스템에서 실행되더라도
하나의 코어를 사용하기 때문에 단일코어의 성능이 낮은 32코어 장치보다 단일 코어 성능이 높은 4코어 장치에서
더 빠른 성능을 보인다.

레디스에 부하가 걸린 상태에서 CPU 사용률을 확인해보자. 레디스 인스턴스 하나를 실행하고
레디스 벤치마크 프로그램인 redis-benchmark 명령을 실행하여 부하를 주자.
리눅스 명령행에서 ./redis-benchmark -l -csv 명령을 ctrl+c 를 입력하여 강제 종료하기 전까지 

-l 옵션은 벤치마크 프로그램을 무한루프로 실행하고, --csv 옵션은 벤치마크의 결과를 csv 형태로 출력한다.
벤치마크가 실행되는 동안의 레디스 인스턴스 CPU 사용량을 확인하기 위해서 새로운 리눅스 명령행에서 top 명령을 실행해 보자

htop 을 통해서 가상머신에 설치된 3개의 코어 중 3번 코어의 사용률이 100%임을 보여 주고 있으며,
레디스 프로세스의 CPU 사용률이 99.6%임을 나타낸다. 레디스 인스턴스가 세 개의 코어중 3번 코어만 사용하고 있음을
알 수 있다. 이와 같이 사실을 바탕으로 멀티코어 시스템에서 성능을 최대로 끌어내기 위해 8코어 시스템에서는 
레디스 인스턴스 8개를 실행하는 것이다.

8개의 레디스 인스턴스를 실행했을 때 첫 번째 임계점은 CPU 리소스다. 
두 번째 임계점은 메모리 대역폭이다. 메모리의 대역폭이란 1초에 전송할 수 있는 데이터양으로 정의된다.

메모리 대역폭의 임계점을 확인하기 위해서 하나의 시스템에 8개의 인스턴스가 실행되는 상황을 살펴보자

메모리 대역폭
cpu
core1, core2, core3, ...
데이터 버스
메모리 대역폭
레디스 인스턴스1, 레디스 인스턴스2, 레디스 인스턴스3, ...

[그림 9-2]는 단일 시스템에서 8개의 인스턴스들이 점유하는 메모리 상태
레디스는 명령어 처리를 위해 메모리에 접근하고, 조회된 데이터는 메모리 대역폭을 사용하여 데이터 버스를 통해서 해당 코어로 전송하게 된다.
즉 8개의 레디스 인스턴스가 메모리 대역폭을 나누어 사용하므로 병목현상이 발생한다.
원활하지 않은 서비스란 통상적인 레디스의 명령 응답속도보다 높은 응답시간을 보이는 상황을 말한다.

이와 같은 이유로 단일 시스템에서 다중의 인스턴스를 실행하려면 메모리 대역폭이 충분해야 한다.
메모리 대역폭이 저마다 다르므로 테스트를 통해서 구해야 한다.

메모리 대역폭이 충분하다고 가정하면 코어 개수의 1/2보다 작은 수의 인스턴스를 실행하는 것이 적당하다.

9.1.2 메모리 크기
레디스는 메모리에 데이터를 저장하기 때문에 메모리 크기를 지정하는 것은 성능과 가장 밀접한 관련이 있다.
어떤 사용자는 레디스에 저장될 메모리의 크기를 산정하지 못하여 redis.conf maxmemory 걸정값을 지정하지 않고 사용
하기도 한다. 이때 발생 가능한 문제점에 대하여 알아보자.

redis.conf의 maxmemory 설정에 지정된 크기는 키를 위한 공간과 데이터를 위한 공간을 모두 포함한다.

예를 들어 maxmemory 설정 4GB를 지정했다면 실제로 저장 가능한 데이터의 크기는 4GB보다 작다.

4GB 메모리
키 영역저장  | 데이터 저장 영역

redisObject    redisObject
key:1      ->  데이터 1

redisObject    redisObject
key:2      ->  데이터 2

...        ->  ...

redisObject    redisObject
key:3      ->  데이터 3

실제로 저장되는 데이터의 크기는 redisObject와 키가 저장된 크기를 뺀 나머지가 된다.
저장되는 데이터가 작은 크기의 문자열이라면 redisObject를 저장하기 위한 오버 헤드가 더
크게 된다. 이럴 때는 문자열을 숫자로 바꾸어 저장하거나, 다른 데이터형을 사용하면 더 많은 데이터를 저장할 수 있다.

이때 스왑영역이 충분하지 않으면 운영체제는 메모리에서 동작 중인 프로세스를 제거하여 사용 가능한 메모리 영역을 확보한다.
이와 같이 동작 중인 프로세스를 죽이는 리눅스의 프로그램을 OOM 킬러라고 한다. 그러므로 OOM 킬러를 피하려면 충분한 스왑공간을
확보해야 한다. 그런데 스왑공간에 데이터가 저장되기 시작하면 레디스의 응답시간은 수십 배에서 수백 배까지 늘어나게 된다.
만약 응답시간이 중요한 서비스라면 redis.conf에 maxmemory 설정에 설치된 물리 메모리 크기 이내의 값을 지정하여야 한다.

일반적으로 운영체제는 설치된 물리 메모리 크기의 두 배를 스왑공간으로 할당한다. 여기서 말하는 두 배는 메모리가 충분하지
못했던 과거의 기준이다. 메모리의 가격이 저렴해지고 엔트리급 서버 시스템이 16GB 이상의 메모리를 갖는 지금은 기준이 조금 달라졌다.

레드헷 엔터프라이즈 가상 메모리 설정 가이드 문서** 에 따르면 시스템에 설치된 물리 메모리의 크기에 따라서 다른 값을 설정하도록 권고
하고 있다. 가상 메모리 설정 문서에는 특별한 이유가 없으면 시스템에 설치된 메모리보다 작은 스왑공간을 설정하라고 되어 있다. 
[표 9-1]은 레드헷 엔터프라이즈에서 추천하는 설치된 물리적 메모리에 대한 스왑공간의 크기다.

설치된 물리적 메모리, 추천 크기
2GB, 4GB
2~8GB, 실치된 물리 메모리의 2배
8~64GB, 설치된 문리 메모리의 1/2배
64GB, 4GB

나열된 값은 범용전인 시스템의 설정값이다. 레디스를 운용한다면 조금 다른 산정 방식이 필요한다, 레디스의 운용 정책에 따라서
설정이 달라진다. 스왑영역을 할당할 때는 설치된 물리 메모리 용량과 레디스의 영구 저장소 사용 여부를 고려해야 한다.

레디스가 AOF나 스냅샷과 같은 영구 저장소를 사용하도록 설정되어 있다면 스왑영역은 최소한 물리 메모리 크기만큼의 스왑영역을
설정해야 한다.

자세한 내용은 9.2 '메모리 설정'에서 알아보도록 하자

지정된 레디스의 메모리 크기보다 더 많은 데이터를 저장하려들면 레디스는 오류 메시지를 전송하고 쓰기 요청을 실패한다.
하지만 이 상황에서 읽기 요청은 정상적인 응답시간으로 서비스 된다. 그러므로 응답시간이 중요한 서비스에서는 레디스가 사용할
메모리의 크기를 지정하는 것이 유리하다.

레디스에 저장된 데이터의 크기가 maxmemory 설정에 지정된 값을 초과하게 되면 레디스의 쓰기 연산이 실패하게 되고,
이에 레디스는 저장 가능한 메모리 영역을 확보하기 위하여 기존에 저장된 데이터를 지운다. 이와 같은 동작은
redis.conf의 maxmemory-policy 설정에 지정된 값에 따라서 달라지는데. 10장에서 '환경 설정 파일'에서 자세히 알아보도록 하자.



















