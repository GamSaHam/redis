문자열 데이터는 키 하나에 문자열 하나를 저장할 수 있다.
저장 가능한 문자열의 키기는 최대 512MB이며 이 크기를 넘어서 저장할 떄는
ERR string exceeds maximun allowdsize 에러 메시지를 출력한다.

레디스가 문자열 데이터를 저장할 때는 인코딩된 문자열과 몇 가지 부가 정보가 포함된
구조체로 변환하여 저장하며 이것을 레디스 객체형이라 부른다.

레디스는 동시에 키와 데이터를 저장하고 조회하는 mget, mset 명령어를 제공
set, get 앞에 m을 붙임 
셋을 처리할때 접두사 z, 맵을 처리할때는 h

mset
시간 복잡도 O(n)

mget 
시간 복잡도 O(n)

mset key1 value1 key2 value2 key3 value3
mget key54 key1 key2 key3
1) (nil)
2) "value1"
3) "valu2"
4) "value3"

setnx
시간복잡도: O(1)
설명: 기존에 값이 있으면 추가를 안함

msetnx
시간복잡도: O(n)
설명: setnx와 동일한데 입력을 여러개 받음

중간에 키가 있을경우에 다음 명령어는 동작 안함

getset
시간복잡도: O(1)

값을 가지고 오면서 새로운 값을 설정

incrby
시간복잡도: O(1)

decrby
시간 복잡도 O(1)

127.0.0.1:6379> incr test:key1
(integer) 1
127.0.0.1:6379> incrby test:key1 5
(integer) 6
127.0.0.1:6379> get test:key1
"6"
127.0.0.1:6379> decr test:key1
(integer) 5
127.0.0.1:6379> decrby test:key1 +3
(integer) 2
127.0.0.1:6379> get test:key1
"2"
127.0.0.1:6379> decrby test:key1 -3
(integer) 5
127.0.0.1:6379> get test:key1
"5"

incr, decr 명령어 처리는 64비트 부호화 정수 signed integer 표현
할 수 있는 범위에서만 가능하다 ex) 9223372036854775807

레디스는 내부적으로 시스템 종속적인 정수형을 가지고 있지 않기 때문에
32비트와 64비트 인스턴스에 관계없이 동일하다.
문자열 데이터의 숫자 증감처리 명령을 사용할 때는 이점에 유의하자.

비트연산

setbit
시간복잡도 O(1)

getbit
시간복잡도 O(1)

strlen
시간복잡도 O(1)

bitcount
시간복잡도 O(N)

127.0.0.1:6379> setbit key 0 1
(integer) 0
127.0.0.1:6379> setbit key 1 1
(integer) 0
127.0.0.1:6379> getbit key 0
(integer) 1
127.0.0.1:6379> getbit key 1
(integer) 1

key에 바이트 값은 
0011 로 저장되어 있음

append
문자열 합치는거

'm'의 아스키 값은 6D고 이것을 이진수로 변환하면 01101101이 된다.

문자를 'my'로 바꾸어도 0번쨰 부터 7번째 값은 그데로 유지된다.

01101101 01111001 'm' 'y'

사용자가 오늘 로그인하였는지 확인하는 기능

1. 사용자가 로그인 요청을 한다.
2. 오늘 날짜의 로그인 키를 만든다 ex) login:20130317
3. 사용자번호에 해당하는 오프셋에 로그인 상태를 표시하기 위해서 1비트를 1로 바꾼다.
4. 오늘 로그인한 사용자의 수를 확인한다.

setbit login:20130317 9851254 1 
// 20130317일날에 사용자번호 9851254가 로그인 하였다.

getbit login:20130316 92456
// 20130316일날에 사용자번호 92456가 로그인 했는지 확인한다.

bitcount login:20130317
// 1

메모리 차이
used_memory_human: 675KB
이후
used_memory_human: 2.84MB

약 천만명의 사용자에 대한 로그인 정보를 저장하는데 단지 2.1MB만의 메모리가 사용됬다.
단순 계산하면 약 60MB의 저장소만으로 한달 동안의 사용자 로그인 정보를 저장 할 수 있다.
bitcount로 중복을 제거한 로그인 사용자 수를 조회했다.


이와 같이 비트연산을 스위치로 생각하고 사용하면 더욱더 다양하게 활용할 수 있다.



















