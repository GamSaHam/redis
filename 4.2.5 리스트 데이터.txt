리스트는 저장 순서를 기억하며 중복을 허용한다.
저장 가능한 최대 요소 수는 2^32-1(약 42억개)다.

키 -> 값(Head) <-> 값 <-> 값(Tail)

lpush, rpush 형태로 되어있다.

레디스의 리스트 데이터는 내부적으로 덱(Deque) 데이터 구조로 되어 있다.

덱은 선형 자료구지인 스택과 큐의 특징을 하나로 모은 자료구조이다.

레디스에서 스택 연산을 표현할려면 rpush, rpop명령어를 사용하면 한쪽에서만 자료의 입출력이 일어나도록 구현하면 된다.

lindex
지정된 리스트에 저장된 요소에 인덱스에 해당하는 요소 값을 조회한다.
시간복잡도: O(N)

rpop
지정된 리스트에 저장된 요소 중 맨 오른쪽에 요소를 조회한다.
시간복잡도: O(1)

blpop
지정된 리스트에 저장된 요소 중 맨 왼쪽 요소를 조회한다.
시간복잡도: O(1)

brpop
지정된 리스트에 저장된 요소 중 맨 오른쪽의 요소를 조회한다.
시간복잡도: O(1)

큐연산
lpush, rpop 또는 rpush, lpop명령을 사용하여 큐 자료구조를 구현할 수 있다.

127.0.0.1:6379> rpush key1 data1
(integer) 1
127.0.0.1:6379> rpush key1 data2
(integer) 2
127.0.0.1:6379> lpop key1
"data1"
127.0.0.1:6379> lpop key1
"data2"

레디스에서 리스트 데이터를 조회하는 방법에는 하나의 요소를 조회하는 단건 조회, 인덱스 범위에 해당하는 요소를 조회하는
범위 조회 데이터가 입력될때 까지 기다리는 블로킹 조회가 있다.

127.0.0.1:6379>  rpush key1 data1
(integer) 1
127.0.0.1:6379>  rpush key1 data2
(integer) 2
127.0.0.1:6379>  rpush key1 data3
(integer) 3

127.0.0.1:6379> lindex key1 0
"data1"
127.0.0.1:6379> lindex key1 1
"data2"
127.0.0.1:6379> lindex key1 2
"data3"
127.0.0.1:6379> lindex key1 3
(nil)

127.0.0.1:6379> lrange key1 0 3
1) "data1"
2) "data2"
3) "data3"

// lindex key1 -1 을 해도 내부적으로 덱으로 구현되어있어서 lindex key1 1 이랑 찾는 시간이 비슷하다.

리스트 데이터를 조회할 때 두 가지 유의 사항이 있다. 

1. 방향성
2. 임의 위치 조회

블로킹 조회

블로킹 연산을 지원하는 명령어는 blpop, brpop, brpoplpush 뿐이다.

127.0.0.1:6379> lpush job:queue1 'add friend user1'
(integer) 1
127.0.0.1:6379> brpop job:queue1 0
1) "job:queue1"
2) "add friend user1"

이와 같이 brpop, blpop은 요구된 키에 저장된 값이 없을 때 데이터가 입력될 때까지 대기한다.

127.0.0.1:6379> brpop job:queue1 5
(nil)
(5.03s)

블로킹 대기시간을 5초로 지정했다.
