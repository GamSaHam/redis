레디스 저장된 키를 관리하는 명령에는
키의 삭제, 만료, 키 목록 조회, 직렬화, 역 직렬화, 데이터형 조회, 키 이동 등이 있다.
이중 키삭제와 변경, 만료, 데이터형 조회, 키 목록 조회

del명령어와 rename 명령어가 있다. 키를 삭제하면 당연히 데이터도 삭제된다.
del, rename은 저장된 자료형과 관계없이 실행할 수 있다.

del
레디스에 저장되 키와 데이터를 삭제하고 삭제된 키의 개수를 돌려준다.
시간복잡도: O(1)

rename
주어진 키의 이름을 변경하고 변경 결과를 돌려준다.
시간복잡도: O(1)

expire
지정된 키에 만료시간을 초 단위로 설정한다. 단 키가 존재하지 않으면 0을 응답한다.
시간복잡도: O(1)

ttl
지정된 키의 남은 만료시간을 초 단위로 조회한다.
시간복잡도: O(1)

exists
명령은 지정된 키가 존재하는지 검사한다.
시간복잡도: O(1)

expireat
만료시간을 유닉스 타임스탬프 시간으로 설정한다.
시간복잡도: O(1)

persist
키에 지정된 만료시간을 제거한다.
시간복잡도: O(1)

유닉스 타임스탬프
레디스는 입력된 타임스탬프값을 GMT값으로 인식하여 처리하므로 별도로 시간을 더할 필요가 없다.

pexire, pttl, pexpireat 만료시간단위가 밀리초인 것을 제외하고 동일하다.

127.0.0.1:6379> set key 'test value'
OK
127.0.0.1:6379> get key
"test value"
127.0.0.1:6379> rename key key1
OK
127.0.0.1:6379> get key1
"test value"
127.0.0.1:6379> del key1
(integer) 1
127.0.0.1:6379> mget key key1
1) (nil)
2) (nil)

127.0.0.1:6379> set test:key hello
OK
127.0.0.1:6379> ttl test:key
(integer) -1
127.0.0.1:6379> expire test:key 20
(integer) 1
127.0.0.1:6379> ttl test:key
(integer) 19
127.0.0.1:6379> set test:key hello1
OK
127.0.0.1:6379> exists test:key
(integer) 1
127.0.0.1:6379> get test:key
"hello1"
127.0.0.1:6379> ttl test:key
(integer) -1
// 여기서 set 을 설정하므로 인해 만료시간값이 초기화 되었다.
127.0.0.1:6379> expire test:key 10
(integer) 1
127.0.0.1:6379> exists test:key
(integer) 0
127.0.0.1:6379> ttl test:key
(integer) -2
// 만료시간으로 인해 -2로 변경되고 nil 데이터 값이 존재하지 않게 된다.
127.0.0.1:6379> get test:key
(nil)

만료시간 정보는 인코딩된 레디스 객체에 포함되어 저장된다. 그러므로 같은 키로 다른 값을
저장하면 값이 사라지게 되어 만료시간 정보도 함께 사라진다.
이와 관련된 객체의 구조는 6장 레디스 내부구조에서 다룬다.

레디스에서는 키와 값을 저장하면 키를 위한 메모리 영역와 값을 위한 메모리영역가 생성되는데
키를 위한 메모리 영역에는 값이 저장된 메모리 영역의 포인터가 저장된다.

127.0.0.1:6379> set test:key hello1
OK
127.0.0.1:6379> expire test:key 20
(integer) 1
127.0.0.1:6379> ttl test:key
(integer) 18
127.0.0.1:6379> persist test:key
(integer) 1
127.0.0.1:6379> ttl test:key
(integer) -1
127.0.0.1:6379> get test:key
"hello1"

키목록 조회
키 패턴은 유닉스의 'glob-style' 패턴을 지원한다.

keys
레디스에 저장된 키의 목록을 지정된 패턴에 의해여 조회한다.
시간복잡도: O(N)

127.0.0.1:6379> mset test:list 1 counter:rand:00000 2 mylist 3
OK
127.0.0.1:6379> keys test*
1) "test:list"
127.0.0.1:6379> keys *[:]*
1) "counter:rand:00000"
2) "test:list"
127.0.0.1:6379> keys *[0]*
1) "counter:rand:00000"
127.0.0.1:6379> keys ?e*
1) "test:list"
127.0.0.1:6379>

// ?e 두번째 글자가 e 이고 ? 아무 한글자를 나타낸다.
