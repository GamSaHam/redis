
NoSQL은 제품마다 특징이 제각각이다. 특징에 따라서 할 수 있는 것과 할 수 없는 것이 있다.
이번장에서는 레디스로 할 수 있는 것들에 대하여 쇼핑몰 사이트 사례를 들며 설명한다.
기초적인 기능을 시작으로 서비스에 적용할수 있는 수준까지 확장시키며 살펴 볼 것이다.

요구 사항 정의, 기능 정의, 문제점 파악, 제디스를 사용한 자바 구현, JUnit 테스트 순서로 진행
기존 구현의 문제점과 해결책 그리고 요구 사항 확장 방안도 알아본다.

예제는 자바 소스코드와 테스트를 위한 JUnit 테스트 케이스로 나뉘어진다. 

이 장의 내용
 - 레디스로 구현할 수 있는 것
 - 레디스 활용 사례와 구현
 - 구현의 문제점과 해결책
 - 사례의 기능 확장
 - 기능 테스트

package org.example;

import org.apache.commons.pool.impl.GenericObjectPool;
import org.apache.commons.pool.impl.GenericObjectPool.*;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class JedisHelper {
    protected static final String REDIS_HOST = "192.168.56.102";
    protected static final int REDIS_PORT = 6379;
    private final Set<Jedis> connectionList = new HashSet<>();
    private JedisPool pool;

    /**
     * 제디스 연결풀 생성을 위한 헬퍼 클래스 내부 생성자
     */
    private JedisHelper() {
        Config config = new Config();
        config.maxActive = 20;
        config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;

        this.pool = new JedisPool(config, REDIS_HOST, REDIS_PORT, 5000);
    }

    /**
     * 싱글톤 처리를 위한 홀더 클래스, 제디스 연결풀이 포함된 핼퍼 객체를 반환한다.
     */
    private static class LazyHolder {
        private static final JedisHelper INSTANCE = new JedisHelper();
    }

    /**
     * 싱글톤 객체를 가지온다.
     * @return 제디스 헬퍼 객체
     */
    public static JedisHelper getInstance() {
        return LazyHolder.INSTANCE;
    }

    /**
     * 싱글톤 객체를 가지온다.
     * @return 제디스 헬퍼 객체
     */
    final public Jedis getConnection() {
        Jedis jedis = this.pool.getResource();
        this.connectionList.add(jedis);

        return jedis;
    }

    /**
     * 사용이 완료된 제디스 객체를 회수한다.
     * @param jedis
     */
    final public void returnResource(Jedis jedis) {
        this.pool.returnResource(jedis);
    }

    /**
     * 제디스 연결풀을 제거한다.
     */
    final public void destroyPool() {
        Iterator<Jedis> jedisList = this.connectionList.iterator();

        while(jedisList.hasNext()) {
            Jedis jedis = jedisList.next();
            this.pool.returnResource(jedis);
        }

        this.pool.destroy();
    }
}








