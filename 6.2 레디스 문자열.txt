
레디스 문자열 메모리에 저장할 때 C언어의 char* (포인터)를 사용한다.
레디스는 문자열 데이터에 대한 빠른 연산을 위해서 특별한 구조체를 사용한다.

이 구조체 이름은 sdshdr로 정의 되어 있다.

sdshdr 구조체를 사용함으로써 저장된 문자열 길이를 확인하는 데 O(1) 시간복잡도로 처리가 가능하다.

struct sdshdr {
    int len;
    int free;
    char buf[];
}

typedef char *sds;

sds sdsnewlen(const void *init, size_t initlen) { // 1 
    struct sdshdr *sh; // 2

    if(init) {
        sh = zmalloc(sizeof(struct sdshdr) + initlen + 1); 
        // 3 sdshdr 포인터에 생성할 객체의 크기만큼 메모리를 할당한다.
    } else {
        sh = zcalloc(sizeof(struct sdshrd) + initlen + 1);
    }

    if(sh == NULL) {
        return NULL;
    }

    sh->len = initlen; 
    // 4 sdshdr 구조체의 len 필드에 저장될 문자열의 길이를 저장한다.
    sh->free = 0;

    if(initlen && init) {
        memcpy(sh->buf, init, initlen); 
        // 5 입력된 문자열 데이터를 sdshdr 구조체의 buf필드에 initlen 길이만큼 복사한다.
    }

    sh->buf[initlen] = '\0';

    return (char*)sh->buf; 
    // 6 저장된 문자열 데이터의 위치인 sds 돌려준다.
}

sdsnewlen 함수는 입력된 문자열 사용하여 새로운 sds 문자열 객체를 생성하여 돌려준다.

len(*sh) free buff(sh->buf)

size_t sdslen(const sds s) {
    struct sdshdr *sh = (void*) (s-(sizeof(sturct sdshdr)));
}

1은 저장된 문자열의 위치를 사용하여 sdshdr 구조체의 메모리 주소를 가져오는 코드로,
레디스 소스코드의 sds.c에 선언

추가적으로 더 알고 싶으면 이구문을 파면되겠다.

6.3 레디스 공유객체

문자열 데이터 인코딩에서 알아본것과 같이 자주 사용되는 값을 전역 변수인 공유 객체에 저장해 두고 사용한다.
에러 메시지, 프로토콜을 위한 문자열, 자주 사용되는 문자열, 0부터 9999의 숫자가 해당된다.

특이하게도 모든 값은 redisObject 구조체를 사용하여 표현된다.


struct sharedObjectsStruct {
    robj *ok, *err, *emptybulk, *czero, *cone, *pong, *space,
    *queued, *null[4], *nullarray[4], *emptymap[4], *emptyset[4],
    *emptyarray, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,
    *outofrangeerr, *noscripterr, *loadingerr,
    *slowevalerr, *slowscripterr, *slowmoduleerr, *bgsaveerr,
    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,
    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,
    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *unlink,
    *rpop, *lpop, *lpush, *rpoplpush, *lmove, *blmove, *zpopmin, *zpopmax,
    *emptyscan, *multi, *exec, *left, *right, *hset, *srem, *xgroup, *xclaim,  
    *script, *replconf, *eval, *persist, *set, *pexpireat, *pexpire, 
    *time, *pxat, *absttl, *retrycount, *force, *justid, *entriesread,
    *lastid, *ping, *setid, *keepttl, *load, *createconsumer,
    *getack, *special_asterick, *special_equals, *default_username, *redacted,
    *ssubscribebulk,*sunsubscribebulk, *smessagebulk,
    *select[PROTO_SHARED_SELECT_CMDS],
    *integers[OBJ_SHARED_INTEGERS], // 1
    *mbulkhdr[OBJ_SHARED_BULKHDR_LEN], /* "*<value>\r\n" */
    *bulkhdr[OBJ_SHARED_BULKHDR_LEN],  /* "$<value>\r\n" */
    *maphdr[OBJ_SHARED_BULKHDR_LEN],   /* "%<value>\r\n" */
    *sethdr[OBJ_SHARED_BULKHDR_LEN];   /* "~<value>\r\n" */
    sds minstring, maxstring;
};

1표시된 구문이 문자열 데이터 인코딩에서 사용하는 공유객체 내부의 숫자형 선언부다.


레디스 서버는 redis.c 파일의 main 함수를 통해서 시작된다. 레디스가 사용할 라이브러리와 서버의
기본 설정 변수 등을 초기화하고 redis.conf 설정 파일을 읽어서 레디스 서버에 적용한다.
인련의 작업이 완료되면 initServer 함수가 호출되는데.
이 함수에서 공유객체 생성을 위한 createSharedObjects 함수가 호출된다.

void createSharedObjects(void) {
    int j;

    /* Shared command responses */
    shared.ok = createObject(OBJ_STRING,sdsnew("+OK\r\n"));
    shared.emptybulk = createObject(OBJ_STRING,sdsnew("$0\r\n\r\n"));
    shared.czero = createObject(OBJ_STRING,sdsnew(":0\r\n"));
    shared.cone = createObject(OBJ_STRING,sdsnew(":1\r\n"));
    shared.emptyarray = createObject(OBJ_STRING,sdsnew("*0\r\n"));
    shared.pong = createObject(OBJ_STRING,sdsnew("+PONG\r\n"));
    shared.queued = createObject(OBJ_STRING,sdsnew("+QUEUED\r\n"));
    shared.emptyscan = createObject(OBJ_STRING,sdsnew("*2\r\n$1\r\n0\r\n*0\r\n"));
    shared.space = createObject(OBJ_STRING,sdsnew(" "));
    shared.plus = createObject(OBJ_STRING,sdsnew("+"));

    // ...

    for (j = 0; j < OBJ_SHARED_INTEGERS; j++) { // 1
        shared.integers[j] =
            makeObjectShared(createObject(OBJ_STRING,(void*)(long)j));
        shared.integers[j]->encoding = OBJ_ENCODING_INT;
    }


1 에 표시된 구문이 OBJ_SHARED_INTEGERS 항목이 10000으로 등록 되어진다.
0부터 9999까지의 숫자 데이터가 공유객체로 등록된다.

마치며
이번 장에서는 레디스의 소스코드와 데이터 저장구조에 대해 알아보았다.
지금까지 살펴본 저장구조를 이해한다면 레디스를 더 효율적으로 사용할 수 있는 방법을 찾을 수 있다.
예를 들면 데이터를 저장할 때 공유객체를 사용하여 메모리 사용량을 줄이는 방법이다.

레디스의 소스코드는 다른 오픈소스 프로젝트에 비하여 소스코드 분량이 적다.
그렇기 때문에 상대적으로 분석하기도 수월하다. 관심있는 독자들은 레디스의 rdb.c나 aof.c파일 구조체를
살펴 보기 바란다. 레디스의 소스코드를 처음부터 끝까지 완벽하게 파악하려는 시도는 실패할
가능성이 높다. 먼저 redis.c 파일을 기준으로 가볍게 흐름을 따라가 보고 다음으로 천천히 세부
흐름을 훑어 보는 것이 좋다.







