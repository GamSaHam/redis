CAP정리란 컴퓨터 과학 분야에서 분산 컴퓨터 시스템을 설명하는 데 사용되는 이론이다.
일관성(Consistencey), 가용성(Avaliability), 분할 허용성(Partition Tolerance) 모두를 동시에
지원하는 분산 컴퓨터 시스템은 없다' 라고 정의했다. 2000년에 전산학자 에릭 브루어가 가설을 제시하고
2002년 세스 길버트와 낸시 린치가 이를 증명했다.

정리가 조금 어렵다. 분산 시스템을 이해하기 위하여 간단한 예를 들어 보자.
기업용 애플리케이션 개발하는 개발자 라면 웹 서버와 DB서버를 동일한 시스템에 설치 하지 않을 것이다.
일반적으로 웹서버와 DB서브는 각각 다른 하드웨어에 설치한다. 이와 같이 단일 시스템이 아닌
'다중 시스템 환경에서 스프트웨어가 작동하는 것'을 분산 컴퓨팅이라 한다.
대부분의 NoSQL은 기본적으로 분산환경에서 잘 동작하도록 설계되어 있다.
즉, 동일한 성격의 데이터가 물리적으로 다른 하드웨어에 저장되고 조회된다.
이때 각 NoSQL은 일관성, 가용성, 분할 허용성 가운데 두 가지 속성만을 지원하며 나머지 한 속성은 특정 조건에서만 만족한다. 이것이 CAP 정리의 핵심이다.

CAP 정리에 기초한 세 가지 속성 중에서 어떤한 두 속성을 지원하는지에 따라서 NoSQL의 특징이 달라진다. 
CAP 정리를 이해하기 위해서는 분산 시스템 용어에 대한 이해가 우선되어야 한다.
먼저 분산 시스템에서 사용하는 용어를 살펴 보자.

일관성
Consistency는 동시성또는 동일성이라고하며
'다중 클라이언트에서 같은 시간에 조회하는 데이터는 항상 동일한 데이터임을 보증하는것'

하지만 NoSQL에서는 빠른 분산 처리를 위하여 일관성을 희생하기도 한다.

최종 일관성 또는 궁극적인 일관성 

동기식 방법은 모든 노드의 데이터를 저장이 완료되는 시간동안 클라이언트에서 저장을 돌려줄 수 없으므로
느린 응답시간을 보이지만 강한 데이터의 정합성을 보증한다.
두번째 메모리나 임시 파일에 기록하고 클라이언트에 먼저 응답한 다음, 특정 이벤트 또는 프로세스를 사용하여
노드로 데이터를 동기화 하는 비동기식 방법이다. 비동기식 방법은 클라이언트에게 빠른 응답을 줄 수 있지만,
쓰기 노드에 장애가 발생하였을 때 데이터를 잃어버릴수 있는 단점이 있다.

NoSQL에서 엄밀한 일관성은 최종 일관성에 반대되는 개념이다. 

카산드라는 최종 일관성을 지원한다.

많은 NoSQL 솔류션은 읽기와 쓰기의 성능 향상을 위해 데이터를 메모리에 임시로 기록한 다음 클라이언트에 응답하고
백그라운드 스레드로 해당 데이터를 디스크에 기록한다. 

이러한 처리 방식의 장점은 빠른 응답 속도에 있으며 수정 비용이 적게 든다는 장점이 있다. 
반면 정전과 같은 하드웨어 장애 발생 시에는 데이터 유실이 발생할수 있다. 메모리 항목에 특징이 그대로 적용된듯
카산드라와 HBase에서는 이런 데이터의 유실을 방지하기 위하여 메모리에 저장하기 전에 커밋로그 및 WAL(Write Ahead Log)
파일에 먼저 정보를 기록하여 데이터 유실을 방지하는데, 레디스도 이와 유사한 기능인 AOF(Append Only File)를 사용한다.

